# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and Release Fibrowser Pro üßä

on:
  push:
    tags:
      - "v*" # Trigger only when a version tag is pushed (e.g., v1.0.0)
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: "3.10"
  APP_NAME: FibrowserPro
  MAIN_SCRIPT: main.py

jobs:
  build:
    name: üõ†Ô∏è Build EXE with PyInstaller
    runs-on: windows-latest # Use Windows for Windows executable

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: üèóÔ∏è Build executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --name "${{ env.APP_NAME }}" ${{ env.MAIN_SCRIPT }}

      - name: üì§ Upload EXE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: FibrowserPro-exe
          path: dist/FibrowserPro.exe

  release:
    name: üöÄ Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: ‚¨áÔ∏è Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: FibrowserPro-exe
          path: .

      - name: üöÄ Publish Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: FibrowserPro.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
